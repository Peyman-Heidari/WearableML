my_name <- c(my_char, "Swirl")
my_char<- c("My", "name", "is")
rm(my_char)
my_char
my_name <- my_char
info()
main()
add2 <- function(x,y) {
x+y
}
add2(2,4)
x<- 1:20
above<- function(x,n=10) {
use<- x>n
x[use]
}
above(x)
Sys.time()
library("swirl")
clean()
clear()
rm(list=ls())
library("swirl")
library("swirl")
swirl()
TRUE==TRUE
(FALSE == TRUE) == FALSE
6==7
6<7
10<=10
5!=7
!(5=7)
!5=7
5 NOT=7
5=7
!(5==7)
FLASE&FALSE
FALSE&FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE,FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
c(2,4,5)
mean(c(2,4,5))
swirl()
swirl()
swirl()
library("swirl")
swirl()
submit()
swirl()
remove.packages("swirl")
library("swirl")
install.packages("xlsx")
library(xlsx)
R.home()
install.packages('RMySQL',type='source')
Sys.getenv('MYSQL_HOME')
install.packages('RMySQL',type='source')
Sys.getenv('MYSQL_HOME')
library(swirl)
swirl()
dice_sqr
sum(dice_sqr*dice_fair)
ex2_fair <- sum(dice_fair * dice_sqr)
ex2_fair-3.5^2
sum(dice_fair * dice_high)-3.5^2
sum(dice_high * dice_sqr)-edh^2
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
choose(5,3) * 0.8^3 * (1-0.8)^(5-3)
skip()
pbinom(2, size=5, prob=0.8, lower.tail = FALSE)
qnorm(0.1)
0
qnorm(0.975, mean = 3, sd=2)
3+2*qnorm(0.975, mean = 3, sd=2)
1.96*2 + 3
skip()
skip()
qnorm(0.75, mean=1020, sd=50)
skip()
0.53
ppois(3, mean(2.5*4), lower.tail = FALSE)
ppois(3,2.5 * 4)
pbinom(.005,size = 1000, prob = 0.01)
pbinom(5,1000,.01)
ppois(5,1000*0.01)
coinPlot(10)
coinPlot(10000)
qnorm(0.95)
p'+c(-1,1)*qnorm(.975)*sqrt(p'(1-p')/100)
0.6+c(-1,1)*qnorm(.975)*sqrt(0.6(1-0.6)/100)
skip()
x$conf.int
binom.test(60,100)$conf.int
skip()
ACCompar(20)
lamb<- 5/94.32
lamb + c(-1,1)*qnorm(.975)*sqrt(lamb/94.32)
poisson(5,94.32)
poisson(5/94.32)
skip()
pbinom(4,size = 5, prob = 0.5)
ppois(10,15)
qbinom(4,5)
qbinom(4,5,0.5)
qbinom(4,size=5,prob=0.5)
pbinom(4,size=5,prob=0.5)
pbinom(5,size=5,prob=0.5)
pbinom(3,size=5,prob=0.5)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
Intrain<- createDataPartition(y=segmentationOriginal$Case, p=0.7, list=FALSE)
training<- segmentationOriginal[Intrain,]
testing<- segmentationOriginal[-Intrain,]
set.seed(125)
fit<- train(Case~., data=training, method="rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
library(rpart)
fit<- train(Case~., data=training, method="rpart")
library(caret)
fit<- train(Case~., data=training, method="rpart")
head(training)
fit$finalModel
install.packages("rattle")
suppressMessages(library(rattle))
library(rpart.plot)
fancyRpartPlot(modFit$finalModel)
suppressMessages(library(rattle))
library(rpart.plot)
fancyRpartPlot(fit$finalModel)
install.packages("rpart.plot")
suppressMessages(library(rattle))
library(rpart.plot)
fancyRpartPlot(fit$finalModel)
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
head(olive)
newdata = as.data.frame(t(colMeans(olive)))
fit2<- train(Area~.,data=olive, method="rpart")
out<- predict(fit2, newdata)
out
head(olive$Area, 40)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modelSA <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, method = "glm", family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(modelSA)
missClass(prediction(modelSA, trainSA))
missClass(testSA$chd, predict(modelSA, newdata = testSA))
missClass(trainSA$chd, predict(modelSA, newdata = trainSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.test$y<-factor(vowel.test$y)
vowel.train$y<-factor(vowel.train$y)
varImp(vowel.test)
set.seed(33833)
library(randomForest)
install.packages("randomForest")
set.seed(33833)
library(randomForest)
modvowel <- randomForest(y ~ ., data = vowel.train)
order(varImp(modvowel), decreasing = T)
data(vowel.train)
data(vowel.test)
vowel.train$y<-factor(vowel.train$y)
vowel.test$y<-factor(vowel.test$y)
set.seed(33833)
fit<- train(y~., data=vowel.train, method="rf")
fit1<- train(y~., data=vowel.train, method="gbm")
summary(fit)
summary(fit1)
summary(fit)$accuracy
pred<- predict(fit, data=vowel.test)
pred1<- predict(fit1, data=vowel.test)
crf<- confusionMatrix(pred, vowel.test$y)
crf
pred1<- predict(fit1, vowel.test)
pred<- predict(fit, vowel.test)
crf<- confusionMatrix(pred, vowel.test$y)
crf
cgbm<- confusionMatrix(pred1, vowel.test$y)
cgbm
cagg<- confusionMatrix(pred1, pred)
cagg
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
fit<- train(diagnosis~., data=training, method="rf")
fit1<- train(diagnosis~., data=training, method="lda")
fit2<- train(diagnosis~., data=training, method="gbm", verbose=FALSE)
pred<- predict(fit, testing)
pred1<- predict(fit1, testing)
pred2<- predict(fit2, testing)
c<- confusionMatrix(pred, testing$diagnosis)
c1<- confusionMatrix(pred1, testing$diagnosis)
c2<- confusionMatrix(pred2, testing$diagnosis)
datacom<- data.frame(pred, pred1,pred2,diagnosis=testing$diagnosis)
fitc<- train(diagnosis~., data=datacom, method="rf")
predc<- predict(fitc, testing)
cc<- confusionMatrix(predc, testing$diagnosis)
c
c1
c2
c3
cc
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
names(training)
fitc<- train(CompressiveStrength~., data=training, method="lasso")
fitc
?plot.enet
plot.enet(fitc)
plot.enet(fit$finalModel, xvar="penalty", use.color=TRUE)
plot.enet(fit$finalModel, xvar="penalty")
plot.enet(fitc$finalModel, xvar="penalty", use.color=TRUE)
dat = read.csv("D:/Coursera/gaData.csv")
names(dat)
library(lubridate) # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(forecast)
install.packages("forecast")
library(forecast)
fit<- bats(tstrain)
tstest = ts(testing$visitsTumblr)
for<- forecast(fit, tstest)
forc<- forecast(fit, tstest)
mod <- bats(tstrain)
fcast <- forecast.bats(mod, level=95, h=nrow(testing))
acc <- accuracy(fcast, testing$visitsTumblr)
count <- 0
for (i in 1:nrow(testing)) {
if (testing$visitsTumblr[i] > fcast$lower[i]) {
if(testing$visitsTumblr[i] < fcast$upper[i]) {
count <- count + 1}
}
}
count/nrow(testing)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
results <- c(accsvm[2], accsvmRadial[2], accsvmLinear[2], accsvmPoly[2], accsvmRadial[2], accsvmRadialCost[2])
svm.model<-svm(CompressiveStrength~., data=training)
pred<-predict(svm.model, newdata=testing)
accuracy(pred, testing$CompressiveStrength)
install.packages("svm")
library(svm)
library(e1071)
svm.model<-svm(CompressiveStrength~., data=training)
pred<-predict(svm.model, newdata=testing)
accuracy(pred, testing$CompressiveStrength)
setwd("D:/Coursera/MLFirst")
testing<- read.csv("pml-testing.csv")
training<- read.csv("pml-training.csv")
summary(training)
names(training)
head(training$classe)
head(training$X)
head(training$num_window)
head(training$num_window,60)
head(training$new_window,60)
names(testing)
testing1<- read.csv("pml-testing.csv")
training1<- read.csv("pml-training.csv")
testing<- testing1[,c(-"user_name","X")]
training<- training1[,c(-"user_name","X")]
testing<- testing1[,-c("user_name","X")]
training<- training1[,-c("user_name","X")]
testing<- testing1[,-c(user_name,X)]
training<- training1[,-c(user_name,X)]
testing<- testing1[,-c(1,2)]
training<- training1[,-c(1,2)]
source("Wearable.R")
confusionMatrix(fittedrf,testing$classe)
fitrf
train_control <- trainControl(method="cv", number=10)
fitrf<- train(classe~., data=training, trControl=train_control, method="rf", tuneGrid=grid)
fitrf<- train(classe~., data=training, trControl=train_control, method="rf")
source("Wearable.R")
source("Wearable.R")
train_control <- trainControl(method="cv", number=3)
source("Wearable.R")
source("Wearable.R")
source("Wearable.R")
install.packages("doParllel")
?parallel
install.packages("parallel")
install.packages("doMC")
install.packages("foreach ")
?train
source("Wearable.R")
source("Wearable.R")
install.packages("doMPI")
source("Wearable.R")
source("Wearable.R")
?randomForest
source("Wearable.R")
source("Wearable.R")
INtraining2<- createDataPartition(training$classe, p=0.1)
source("Wearable.R")
source("Wearable.R")
fittedrf<- predict(fitrf, training2)
ss<- training2$classe
dim(fittedrf)
fittedrf
fittedrf$classe
confusionMatrix(fittedrf,training2$classe)
confusionMatrix(fittedrf,testing$classe)
summary(fittedrf)
fittedrf<- predict(fitrf, training2)
confusionMatrix(fittedrf)
source("Wearable.R")
CMrf
confusionMatrix(fittedrf,testing$classe)
fittedrf<- predict(fitrf, testing)
fittedrf
dim(fittedrf)
class(fittedrf)
length(fittedrf)
length(testing$classe)
rm(list=ls())
source("Wearable.R")
fitrf
predict(fitrf, testing)
dim(testing)
source("Wearable.R")
predict(fitrf, testing)
source("Wearable.R")
source("Wearable.R")
rm(list=ls())
testing1<- read.csv("pml-testing.csv", na.strings=c("NA","#DIV/0!", ""))
training1<- read.csv("pml-training.csv", na.strings=c("NA","#DIV/0!", ""))
testing1<-testing1[,colSums(is.na(testing1)) == 0]
training1 <-training1[,colSums(is.na(training1)) == 0]
training1$classe <- factor(training1$classe)
testing1<- read.csv("pml-testing.csv", na.strings=c("NA","#DIV/0!", ""))
training1<- read.csv("pml-training.csv", na.strings=c("NA","#DIV/0!", ""))
#testing1<-testing1[,colSums(is.na(testing1)) == 0]
#training1 <-training1[,colSums(is.na(training1)) == 0]
preP<- preProcess(testing1, method="knnImpute")
testing3<- read.csv("pml-testing.csv", na.strings=c("NA","#DIV/0!", ""))
training3<- read.csv("pml-training.csv", na.strings=c("NA","#DIV/0!", ""))
#testing1<-testing1[,colSums(is.na(testing1)) == 0]
#training1 <-training1[,colSums(is.na(training1)) == 0]
preP<- preProcess(testing3, method="knnImpute")
testing1<- predict(preP,testing3)
testing3<- read.csv("pml-testing.csv", na.strings=c("NA","#DIV/0!", ""))
training3<- read.csv("pml-training.csv", na.strings=c("NA","#DIV/0!", ""))
#testing1<-testing1[,colSums(is.na(testing1)) == 0]
#training1 <-training1[,colSums(is.na(training1)) == 0]
preP<- preProcess(testing3, method=c("knnImpute"))
testing1<- predict(preP,testing3)
rm(list=ls())
testing3<- read.csv("pml-testing.csv", na.strings=c("NA","#DIV/0!", ""))
training3<- read.csv("pml-training.csv", na.strings=c("NA","#DIV/0!", ""))
#testing1<-testing1[,colSums(is.na(testing1)) == 0]
#training1 <-training1[,colSums(is.na(training1)) == 0]
prePt<- preProcess(training3, method=c("knnImpute"))
training1<- predict(prePt,training3)
install.packages("RANN")
library(RANN)
testing3<- read.csv("pml-testing.csv", na.strings=c("NA","#DIV/0!", ""))
setwd("D:/Coursera/MLFirst")
testing3<- read.csv("pml-testing.csv", na.strings=c("NA","#DIV/0!", ""))
training3<- read.csv("pml-training.csv", na.strings=c("NA","#DIV/0!", ""))
#testing1<-testing1[,colSums(is.na(testing1)) == 0]
#training1 <-training1[,colSums(is.na(training1)) == 0]
prePt<- preProcess(training3, method=c("knnImpute"))
training1<- predict(prePt,training3)
source("Wearable.R")
source("Wearable.R")
testing3<- read.csv("pml-testing.csv", na.strings=c("NA","#DIV/0!", ""))
training3<- read.csv("pml-training.csv", na.strings=c("NA","#DIV/0!", ""))
training3<-training3[,(colSums(is.na(testing1))/nrow(training3))<0.2]
(colSums(is.na(testing1))/nrow(training3))
head(training3$stddev_pitch_belt,60)
training3<-training3[,(colSums(is.na(testing1))/nrow(training3))==0]
head(training3$stddev_pitch_belt,600)
training3<- read.csv("pml-training.csv", na.strings=c("NA","#DIV/0!", ""))
head(training3$stddev_pitch_belt,600)
training3<-training3[,(colSums(is.na(testing1))/nrow(training3))<0.001]
source("Wearable.R")
CMrf
CMrf$Acuracy
CMrf$Accuracy
summary(CMrf)
source("Wearable.R")
CMgbm
cmrf
CMrf
CMrpart
prDf<-data.frame(fittedrpart,fittedgbm, fittedgbm, classe=testing$classe)
source("Wearable.R")
fittedrfV
validation$class
validation$classe
names(validation)
validation$problem_id
fittedcombined<- predict(fitcombined, testing)
CMcombined<- confusionMatrix(fittedcombined,testing$classe)
fittedcombined<- predict(fitcombined, testing)
fitcombined
fittedcombined<- predict(fitcombined, prDF)
CMcombined<- confusionMatrix(fittedcombined,testing$classe)
CMcombined
CMrf
prDF<-data.frame(fittedgbm, fittedgbm, classe=testing$classe)
fitcombined<- train(classe~., data=prDF, trControl=train_control, method="rf", na.action=na.pass)
fittedcombined<- predict(fitcombined, prDF)
CMcombined<- confusionMatrix(fittedcombined,testing$classe)
CMcombined
source("Wearable.R")
source("Wearable.R")
source("Wearable.R")
source("Wearable.R")
CMrf
CMgbm
CMrpart
CMcombined
source("Wearable.R")
CMrf
CMgbm
CMrpart
CMcombined
CMrf
source("Wearable.R")
library(klaR)
CMrf
CMgbm
CMnb
CMnb<- confusionMatrix(fittednb,testing$classe)
CMnb
CMcombined
training3<-training3[,(colSums(is.na(testing1))/nrow(training3))<0.001]
training3<-training3[,(colSums(is.na(testing3))/nrow(training3))<0.001]
ff<-1; for (ii in 1:ncol(training3)) {training3[,ff]<-training3[,(colSums(is.na(testing3[,ii]))/nrow(training3[,ii]))<0.001]; ff<-ff+1}
training3<-training3[,colSums(is.na(testing3))==0]
v<- is.na(testing3)
v
colSums(v)
colSums(is.na(testing3))
colSums(is.na(testing3))==0
index<- colSums(is.na(testing3))==0
training3<-training3[,index]
raining3[,1]
training3[,1]
training3[,index]
training3[,training==index]
library(dplyr)
index<- colSums(is.na(testing3))==0
training3<-select(training3, c(index==TRUE))
training3[,index]
class(index)
dim(index)
training3[ , apply( training3, 2, function(x) !any(is.na(x)))]
aa<- training3[ , apply( training3, 2, function(x) !any(is.na(x)))]
rm(list=ls())
fittedrfV<- predict(fitrf, validation)
fittedgbmV<- predict(fitgbm, validation)
fittednbV<- predict(fitnb, validation)
fittedcombinedV<- predict(fitcombined, prDF)
